@page
@model duLichQuangNam.Pages.ScheduleModel
@using System.Security.Claims
@using System.Globalization
@{
    ViewData["Title"] = "Địa điểm du lịch Quảng Nam";
    var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
}

@if (Model.id.HasValue && Model.SelectedDestination != null)
{
    <!-- Chi tiết địa điểm -->
    <div class="container mt-5">
        <h2 class="text-center mb-4">@Model.SelectedDestination.Name</h2>
        <div class="card mx-auto" style="max-width: 600px;">
            <img src="@Model.SelectedDestination.Images.FirstOrDefault()?.ImgUrl" class="card-img-top" style="height: 300px; object-fit: cover;" />
            <div class="card-body">
                <p><strong>Loại hình:</strong> @Model.SelectedDestination.Type</p>
                <p><strong>Vị trí:</strong> @Model.SelectedDestination.Location</p>
                <p><strong>Giờ mở cửa:</strong> @Model.SelectedDestination.OpenTime.ToString("HH:mm")</p>
                <p><strong>Giờ đóng cửa:</strong> @Model.SelectedDestination.CloseTime.ToString("HH:mm")</p>
                <p class="text-success"><strong>Giá vé:</strong> @Model.SelectedDestination.Price.ToString("C")</p>
                <p><strong>Email liên hệ:</strong> @Model.SelectedDestination.Mail</p>
                <p><strong>Mô tả:</strong> @Model.SelectedDestination.Description</p>
            </div>
        </div>
    </div>
}
else
{
    <!-- Giao diện tạo lịch trình -->
    <div class="container-fluid">
        <div class="row">
            <!-- Lịch trình -->
            <div class="col-md-9 order-2 order-md-1" style="max-height: 80vh; overflow-y: auto;">
                <h3 class="text-center mt-3 text-info">Lịch trình của bạn</h3>
                <div class="text-center mb-3">
                    <label for="startDate" class="form-label">Chọn ngày bắt đầu:</label>
                    <input type="date" id="startDate" class="form-control w-50 mx-auto" />
                </div>


                <div id="scheduleContainer" class="mb-3">
                    <!-- Lịch trình mỗi ngày -->
                </div>

                <div class="d-flex justify-content-center mt-3">
                    <button class="btn btn-success" onclick="saveSchedule()">Lưu lịch trình</button>
                </div>
            </div>

            <!-- Danh sách địa điểm & dịch vụ -->
            <div class="col-md-3 order-1 order-md-2 border-start" style="max-height: 80vh; overflow-y: auto;">
                <div class="row mt-3">
                    <div class="col-12 text-center mb-3">
                        <button class="btn btn-primary" id="btnShowDestinations" onclick="showList('destinations')">Địa điểm</button>
                        <button class="btn btn-outline-success" id="btnShowServices" onclick="showList('services')">Dịch vụ</button>
                    </div>
                </div>

                <!-- Danh sách địa điểm -->
                <div id="destinationsList" style="display:none;">
                    <h3 class="text-center mt-3 text-primary">Địa điểm</h3>
                    <div class="mx-2 mb-3">
                        <form method="get" class="d-flex">
                            <input type="text" name="DestinationSearch" value="@Model.DestinationSearch" placeholder="Tìm địa điểm..." class="form-control" />
                            <button type="submit" class="btn btn-primary ms-2">Tìm</button>
                            @if (!string.IsNullOrEmpty(Model.ServiceSearch))
                            {
                                <input type="hidden" name="ServiceSearch" value="@Model.ServiceSearch" />
                            }
                        </form>
                    </div>
                    @if (Model.PagedDestinations.Any())
                    {
                        foreach (var destination in Model.PagedDestinations)
                        {
                            <div id="destination-@destination.Id" class="card shadow-sm border-light rounded-lg mb-3 mx-2"
                                 draggable="true" ondragstart="drag(event)">
                                <img src="@destination.Images.FirstOrDefault()?.ImgUrl" class="card-img-top" style="object-fit: cover; height: 150px;" />
                                <div class="card-body p-2">
                                    <h5 class="card-title">@destination.Name</h5>
                                    <p style="font-size: 0.9rem;">@destination.Description</p>
                                    <p>@destination.Price.ToString("#,0", new CultureInfo("vi-VN")) ₫</p>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-center">Không có địa điểm nào.</p>
                    }
                </div>

                <!-- Danh sách dịch vụ -->
                <div id="servicesList" style="display:none;">
                    <h3 class="text-center mt-3 text-success">Dịch vụ</h3>
                    <div class="mx-2 mb-3">
                        <form method="get" class="d-flex">
                            <input type="text" name="ServiceSearch" value="@Model.ServiceSearch" placeholder="Tìm dịch vụ..." class="form-control" />
                            <button type="submit" class="btn btn-primary ms-2">Tìm</button>
                            @if (!string.IsNullOrEmpty(Model.DestinationSearch))
                            {
                                <input type="hidden" name="DestinationSearch" value="@Model.DestinationSearch" />
                            }
                        </form>
                    </div>
                    @if (Model.PagedServices.Any())
                    {
                        foreach (var service in Model.PagedServices)
                        {
                            <div id="service-@service.Id" class="card shadow-sm mb-3 mx-2"
                                 draggable="true" ondragstart="drag(event)">
                                <img src="@service.Images.FirstOrDefault()?.ImgUrl" class="card-img-top" style="object-fit: cover; height: 150px;" />
                                <div class="card-body p-2">
                                    <h6 class="card-title">@service.Name</h6>
                                    <p style="font-size: 0.85rem;"><strong>Địa điểm:</strong> @service.Location</p>
                                    <p style="font-size: 0.85rem;"><strong>Dịch vụ chính:</strong> @service.MainService</p>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-center">Không có dịch vụ nào.</p>
                    }
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        function showList(type) {
            if (type === 'destinations') {
                document.getElementById('destinationsList').style.display = 'block';
                document.getElementById('servicesList').style.display = 'none';
                document.getElementById('btnShowDestinations').classList.add('btn-primary');
                document.getElementById('btnShowDestinations').classList.remove('btn-outline-primary');
                document.getElementById('btnShowServices').classList.remove('btn-success');
                document.getElementById('btnShowServices').classList.add('btn-outline-success');
            } else {
                document.getElementById('destinationsList').style.display = 'none';
                document.getElementById('servicesList').style.display = 'block';
                document.getElementById('btnShowDestinations').classList.remove('btn-primary');
                document.getElementById('btnShowDestinations').classList.add('btn-outline-primary');
                document.getElementById('btnShowServices').classList.add('btn-success');
                document.getElementById('btnShowServices').classList.remove('btn-outline-success');
            }
        }

        showList('destinations');

        function allowDrop(ev) {
            ev.preventDefault();
        }

        function drag(ev) {
            ev.dataTransfer.setData("text", ev.target.id);
        }

        let dayCount = 0;

        function createDayDiv(dayNum, dateLabel) {
            const dayDiv = document.createElement('div');
            dayDiv.id = `day-${dayNum}`;
            dayDiv.classList.add('border', 'rounded', 'mb-3', 'p-3', 'bg-light');
            dayDiv.setAttribute('ondrop', 'drop(event)');
            dayDiv.setAttribute('ondragover', 'allowDrop(event)');

            const dateHeader = document.createElement('h5');
            dateHeader.classList.add('mb-2');
            dateHeader.textContent = `Ngày ${dayNum} (${dateLabel})`;
            dayDiv.appendChild(dateHeader);

            const itemsDiv = document.createElement('div');
            itemsDiv.classList.add('schedule-day-items');
            itemsDiv.style.minHeight = '100px';
            const pNote = document.createElement('p');
            pNote.classList.add('text-muted');
            pNote.textContent = 'Kéo địa điểm hoặc dịch vụ vào đây để tạo lịch trình cho ngày này.';
            itemsDiv.appendChild(pNote);

            dayDiv.appendChild(itemsDiv);

            return dayDiv;
        }

        // Tạo ngày lịch trình
        function addDay(dateStr) {
            dayCount++;
            const container = document.getElementById('scheduleContainer');
            const dayDiv = createDayDiv(dayCount, dateStr);
            container.appendChild(dayDiv);
        }

                function drop(ev) {
            ev.preventDefault();
            const data = ev.dataTransfer.getData("text");
            const draggedElement = document.getElementById(data);

            if (!draggedElement) return;

            const container = ev.currentTarget.querySelector('.schedule-day-items');
            if (!container) return;

            // Lấy ID gốc (trước khi clone)
            const originalId = data;

            // Kiểm tra trùng lặp
            const isDuplicate = Array.from(container.getElementsByClassName('card')).some(card =>
                card.getAttribute('data-original-id') === originalId
            );

            if (isDuplicate) {
                alert("Địa điểm hoặc dịch vụ này đã được thêm vào ngày này.");
                return;
            }

            // Tạo bản sao
            const clone = draggedElement.cloneNode(true);
            clone.id = data + '-' + new Date().getTime(); // tạo ID mới
            clone.setAttribute('data-original-id', originalId); // đánh dấu ID gốc để kiểm tra trùng

            // Xóa draggable
            clone.removeAttribute('draggable');
            clone.style.cursor = 'default';

            // Nút xóa
            const removeBtn = document.createElement('button');
            removeBtn.type = 'button';
            removeBtn.className = 'btn-close btn-close-white btn-sm float-end';
            removeBtn.title = 'Xóa mục';
            removeBtn.style.position = 'absolute';
            removeBtn.style.top = '5px';
            removeBtn.style.right = '5px';
            removeBtn.onclick = function () {
                clone.remove();

                // Nếu sau khi xóa không còn phần tử nào, thêm lại dòng chú thích
                if (container.querySelectorAll('.card').length === 0) {
                    const pNote = document.createElement('p');
                    pNote.classList.add('text-muted');
                    pNote.textContent = 'Kéo địa điểm hoặc dịch vụ vào đây để tạo lịch trình cho ngày này.';
                    container.appendChild(pNote);
                }
            };

            clone.style.position = 'relative';
            clone.appendChild(removeBtn);

            // Bỏ dòng chú thích nếu có
            const notes = container.querySelectorAll('p.text-muted');
            notes.forEach(p => p.remove());

            container.appendChild(clone);
        }


        // Khi người dùng chọn ngày, tạo ngày lịch trình tương ứng
        document.getElementById('startDate').addEventListener('change', function () {
            const dateVal = this.value;
            if (!dateVal) return;

            // Xóa lịch trình cũ
            const container = document.getElementById('scheduleContainer');
            container.innerHTML = '';
            dayCount = 0;

            // Tạo ngày mới
            addDay(dateVal);
        });

        // Hàm lưu lịch trình
        function saveSchedule() {
            const userId = "@userId";

            if (!userId) {
                alert("Bạn chưa đăng nhập hoặc ID người dùng không hợp lệ.");
                return;
            }

            const startDate = document.getElementById('startDate').value;
            if (!startDate) {
                alert("Vui lòng chọn ngày bắt đầu.");
                return;
            }

            // Kiểm tra có lịch trình không
            const scheduleContainer = document.getElementById('scheduleContainer');
            const dayDivs = scheduleContainer.querySelectorAll('[id^="day-"]');

            if (dayDivs.length === 0) {
                alert("Lịch trình trống. Vui lòng kéo địa điểm hoặc dịch vụ vào.");
                return;
            }

            let hasItems = false;
            const scheduleItems = [];

            dayDivs.forEach((dayDiv, dayIndex) => {
                const dayNumber = dayIndex + 1;
                const itemsContainer = dayDiv.querySelector('.schedule-day-items');
                if (!itemsContainer) return;

                const cards = itemsContainer.querySelectorAll('.card');
                if (cards.length > 0) hasItems = true;

                cards.forEach((card, index) => {
                    
                    const parts = card.id.split("-");
                    if (parts.length < 2) return;
                    const entityType = parts[0];
                    const entityId = parseInt(parts[1]);

                    scheduleItems.push({
                        id: 0,
                        scheduleId: 0,
                        entityType: entityType,
                        entityId: entityId,
                        dayOrder: index + 1,
                        dayNumber: dayNumber
                    });
                });
            });

            if (!hasItems) {
                alert("Lịch trình trống. Vui lòng kéo địa điểm hoặc dịch vụ vào.");
                return;
            }

            const schedule = {
                userId: parseInt(userId),
                name: "Lịch trình của tôi",
                startDate: startDate,
                endDate: startDate,
                description: "Tạo từ trình kéo thả",
                createdAt: new Date().toISOString(),
                scheduleItems: scheduleItems
            };

            fetch('https://localhost:8080/api/schedules', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(schedule)
            })
            .then(res => {
                if (res.ok) return res.json();
                else return res.text().then(text => Promise.reject(text));
            })
            .then(data => {
                alert("Lưu lịch trình thành công!");
                console.log("Lịch trình đã lưu:", data);
                document.getElementById('startDate').value = "";
                const scheduleContainer = document.getElementById('scheduleContainer');
                scheduleContainer.innerHTML = "";
            })
            .catch(err => {
                console.error("Lỗi khi lưu lịch trình:", err);
                alert("Lỗi khi lưu lịch trình.");
            });
        }
    </script>
}
